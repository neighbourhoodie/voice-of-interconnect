module.exports = sentiment

const AlchemyLanguageV1 = require('watson-developer-cloud/alchemy-language/v1')

function sentiment (server, store, noteId, text) {
  if (server.app.simulateWatson) {
    return new Promise((resolve, reject) => {
      setTimeout(function () {
        addSentiment(store, noteId, parseFloat(Math.random().toFixed(6))).then(resolve, reject)
      }, 3000)
    })
  }

  const api = new AlchemyLanguageV1({
    api_key: process.env.ALCHEMY_API_KEY
  })

  return new Promise((resolve, reject) => {
    api.sentiment({
      text: text,
      language: 'english'
    }, function (error, result) {
      if (error) {
        return reject(error)
      }

      // {
      //   "status": "OK",
      //   "usage": "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
      //   "totalTransactions": "1",
      //   "docSentiment": {
      //     "score": "0.626432",
      //     "type": "positive"
      //   }
      // }
      const sentiment = parseFloat(result.docSentiment.score) || 0.5
      addSentiment(store, noteId, sentiment).then(resolve, reject)
    })
  })
}

function addSentiment (store, noteId, sentiment) {
  return Promise.all([
    store.update(noteId, function (doc) {
      doc.progress.push({
        type: 'analysis',
        at: new Date()
      })
      return doc
    }),
    store.add({
      id: noteId + '/sentiment',
      sentiment: sentiment
    })
  ])
}
